!! Understanding Visitors
@cha:visitors

In a previous chapter, you built a simple mathematical expression interpreter.
You were able to build an expression such as ==(3 + 4) * 5== and then ask the interpreter to compute its value.
In this chapter we will introduce Visitors.
A Visitor is a way to represent an action on a structure (often a tree) as its own object.
The action can be complex and need its own specific state.
What is nice about a visitor is that it embeds its own state and behavior which would be otherwise mixed with the ones of the structure and other actions.
In addition we can have multiple visitors visiting the same structure without mixing their concerns. 
Finally a visitor is modular because you may execute one and not another one or even load another one. 

+A simple hierarchy of expressions.>file://figures/ExpressionsHierarchyFinal.pdf|width=50|label=fig:ExpressionWithEvaluateWith+

You will build two simple visitors that evaluate and print an expression.

Let us start with the previous situation.

!!! Existing situation: expression trees

Figure *@fig:ExpressionWithEvaluateWith* shows the simple hierarchy of expressions that we developed in a previous chapter.
We basically have the different possible parts of an expression (variable, addition, value...) represented by their own node.
Each node holds some state and in addition specifies how it computes its value. 
This is often done by a recursive call sending message ==evaluateWith:== to subexpressions.

Note that expression trees are similar to the ones that are used to manipulate programs. 
For example, compilers and code refactorings as offered in Pharo and many modern IDEs are doing such manipulation with trees representing code (often called Abstract Syntax Trees).

In the rest of this chapter we will introduce step by step a visitor and we will incrementally replace the recursive calls by calls to the a visitor. 
Doing so we will make sure that all the tests still pass.

!!! Visitor's key principle

The previous solution is using a simple recursive process to compute the value of an expression. 
Now we will define the evaluation using a visitor. 

The key principle about visitor is the following one: a visitor declares to a structure that it wants to visit it (i.e., apply a treatment to it)
and then the structure replies by indicating to the visitor how this visitor should visit it. 
This interaction is a double dispatch: 
it means that given a visitor and a structure, the correct method will be executed without having to explicitly test the class of the structure.

You do not have to deeply understanding this now.
This interaction will emerge from the exercise.

+Visitor principle.>file://figures/ExpressionsVisitorPrinciple.pdf|width=70|label=fig:ExpressionsVisitorPrinciple+

Here is a typical illustration: The class ==Constant== defines the method ==accept:== to say to the visitor that it should visit the expression using the message ==visitConstant:==.

[[[
EConstant >> accept: aVisitor
  ^ aVisitor visitConstant: self
]]]

The visitor defines the specific action that he will perform:

[[[
EEvaluatorVisitor >> visitConstant: aConstant
  ^ aConstant value
]]]

Here is how the interaction starts: We ask the structure to accept a visitor.

[[[
| constant |
constant := EConstant value: 5.
constant accept: EEvaluatorVisitor new. 
]]]




Let us step by step implement an evaluating visitor.

!!! Introducing an Evaluating Visitor
We start by adding an abstract method ==accept:== in the ==Expression== class to document that any expression can ''welcome'' a visitor and tells it how 
to react.

Here is the definition of the the abstract method ==accept:==:

[[[
EExpression >> accept: aVisitor

	self subclassResponsibility
]]]

Now we take a concrete node expression: we start with constant expressions.
When the visitor visit a constant, the constant tells the visitor that it should visit the constant as a constant. 
This is literaly what the following method is doing.

[[[
EConstant >> accept: aVisitor

	^ aVisitor visitConstant: self
]]]

!!!! Defining the visitor class
Now it is time to define class representing the evaluating visitor.

[[[
Object subclass: #EEvaluatorVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Expressions-Model'
]]]

Once the class is created we can define what is it to visit a constant expression.
This is simple, it is just to return the constant value. 
We define the ==visitConstant:== as follows: 

[[[
EEvaluatorVisitor >> visitConstant: aConstant

	^ aConstant value
]]]


!!!! Adding a test class

To make sure that we control what we are doing, we add a test class.

[[[
TestCase subclass: #EEvaluatorVisitorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Expressions-Test'
]]]

We are ready to write our first test

[[[
EEvaluatorVisitorTest >> testVisitConstantReturnsConstantValue

	| constant result |
	constant := EConstant value: 5.
	result := constant accept: EEvaluatorVisitor new.
	self assert: result equals: 5
]]]

We can rewrite the old method ==evaluateWith:== method to invoke the visitor.

[[[
EConstant >> evaluateWith: anObject
	
	^ self accept: EEvaluatorVisitor new
]]]

You can execute your new and old tests and both should work.
Note that once the visitor is in place, we will remove this method and only define it once in the superclass. 

!!! Now handling addition
We will do the same with adddition.
First we define a new ==accept:== method on the ==Addition== class to say to the visitor which method it should execute on the structure.

[[[
EAddition >> accept: aVisitor

	^ aVisitor visitAddition: self
]]]

Notice again that the visitor announces itself and that the addition tells it that it should be treated this time as an addition.
This pattern is key to the visitor logic.
You will see that we will repeat again and again.
Each expression will declare how it should considered by the visitor. 

!!!! Adding a new test
Now we can define a new test to validate that the execution of an addition is correct.

[[[
EEvaluatorVisitorTest >> testVisitAdditionReturnsAdditionResult

	| expression result |
	expression := EAddition
		left: (EConstant value: 7)
		right: (EConstant value: -2).
	result := expression accept: EEvaluatorVisitor new.	
	self assert: result equals: 5
]]]

We create the accessors ==left== and ==right==.

[[[
EBinaryExpression >> left
	^ left
]]]

[[[
EBinaryExpression >> right
	^ right
]]]

!!!! Defining visitAddition:
Now we are ready to define the method ==visitAddition:== as follows:

[[[
EEvaluatorVisitor >> visitAddition: anEAddition
	
	| evaluationOfLeft evaluationOfRight |
	evaluationOfLeft := anEAddition left accept: self.
	evaluationOfRight := anEAddition right accept: self.
	^ evaluationOfLeft + evaluationOfRight
]]]

Let us study a bit the method ==visitAddition:==. 
What you see is that each subexpression left and right is now using the visitor. 
And once each value is known the visitor will perform the addition.



We also redefine the method ==evaluateWith:== to use the visitor. 
As you recognize it, it is the same as in the class ==Constant==. 
We will remove it later. 

[[[
EAddition >> evaluateWith: anObject
	^ self accept: EEvaluatorVisitor new
]]]

Again all your new and old tests should pass. 

!!! Supporting negation

We will focus on the negation.
Again we start by defining a test method. 

[[[
EEvaluatorVisitorTest >> testVisitNegationReturnsNegatedConstant

	| expression result |
	expression := (EConstant value: 7) negated.
	result := expression accept: EEvaluatorVisitor new.
	self assert: result equals: -7
]]]

We follow the same process.
We define the ==accept:== method for the negation.

[[[
ENegation >> accept: aVisitor
	^ aVisitor visitNegation: self
]]]

We add the ==expression== accessor.

[[[
ENegation >> expression
	^ expression
]]]

!!!! Defining visitNegation:
We define the ==visitNegation:== as follows: 

[[[
EEvaluatorVisitor >> visitNegation: anENegation 

	| aNumber |
	aNumber := anENegation expression accept: self.
	^ aNumber negated
]]]

What you see is that again the method ==visitNegation:== is invoking the visitor on a subexpression, here the negated expression.

!!!! Again redefining evaluateWith:

We  redefine the ==evaluateWith:== method on a negation to invoke the visitor.

[[[
ENegation >> evaluateWith: anObject
	^ self accept: EEvaluatorVisitor new
]]]



!!! Supporting Multiplication

You start to get it and we will do exactly the same for multiplication. 

!!!! Adding a test
[[[
EEvaluatorVisitorTest >> testVisitMultiplicationReturnsMultiplicationResult

	| expression result |
	expression := EMultiplication
		left: (EConstant value: 7)
		right: (EConstant value: -2).	
	result := expression accept: EEvaluatorVisitor new.
	self assert: result equals: -14
]]]

!!!! Defining the accept: method

We define the ==accept:== method on the ==Multiplication== class.
[[[
EMultiplication >> accept: aVisitor
	
	^ aVisitor visitMultiplication: self
]]]

!!!! Defining the visitMultiplication


[[[
EEvaluatorVisitor >> visitMultiplication: anEMultiplication 

	| evaluationOfLeft evaluationOfRight |
	evaluationOfLeft := anEMultiplication left accept: self.
	evaluationOfRight := anEMultiplication right accept: self.
	^ evaluationOfLeft * evaluationOfRight
]]]

Figure @fig:ExpressionsVisitorBeforeBindings describes the situation.

+Visitor at work.>file://figures/ExpressionsVisitorBeforeBindings.pdf|width=70|label=fig:ExpressionsVisitorBeforeBindings+


!!! Supporting Division

For division we do the same. 

!!!! First two tests

[[[
EEvaluatorVisitorTest >> testVisitDivisionReturnsDivisionResult

	| expression result |
	expression := EDivision
		numerator: (EConstant value: 6)
		denominator: (EConstant value: 3).
	result := expression accept: EEvaluatorVisitor new.
	self assert: result equals: 2
]]]

[[[
EEvaluatorVisitorTest >> testVisitDivisionByZeroThrowsException

	| expression result |
	expression := EDivision
		numerator: (EConstant value: 6)
		denominator: (EConstant value: 0).	
	self
		should: [expression accept: EEvaluatorVisitor new]
		raise: EZeroDenominator
]]]

[[[
EEvaluatorVisitorTest >> testVisitDivisionByZeroThrowsException

	| expression  |
	expression := EDivision
		numerator: (EConstant value: 6)
		denominator: (EConstant value: 0).
	
	self
		should: [expression accept: EEvaluatorVisitor new]
		raise: EZeroDenominator
]]]

!!!! Improving the creation API

We introduce the class message  ==numerator:denominator:== to ease division creation.

[[[
EDivision class >> numerator: aNumeratorExpression denominator: aDenominatorExpression

	^ self new
		numerator: aNumeratorExpression;
		denominator: aDenominatorExpression;
		yourself
]]]


We define accessors so that the visitor can access to subexpression. 

[[[
EDivision >> numerator
	^ numerator
]]]

[[[
EDivision >> denominator
	^ denominator
]]]

!!!! Defining accept:

Then we define the method ==accept:== for divisions.

[[[
EDivision >> accept: aVisitor

	^ aVisitor visitDivision: self
]]]

!!!! Defining the visitDivision: 

We define the ==visitDivision:== method as follows. It is similar to others. In addition here we prevent division by Zero and raise an exception instead. 

[[[
EEvaluatorVisitor >> visitDivision: aDivision 

	| denom numerator |
	denom := aDivision denominator accept: self.
	denom isZero
		ifTrue: [ EZeroDenominator signal ].
	numerator := aDivision numerator accept: self. 
	^ numerator / denom
]]]


!!! Moving up evaluateWith:

Since we get bored to always redefine the method ==evaluateWith:== we define it in the superclass, the class ==Expression== and we
remove it from all the subclasses except ==Variable== since we will still have to transform it. 

[[[
EExpression >> evaluateWith: anObject

	^ self accept: EEvaluatorVisitor new
]]]



!!! Supporting variable

to be done!!!

[[[
EVariable >> accept: aVisitor
	^ aVisitor visitVariable: self
]]]

[[[
Object subclass: #EEvaluatorVisitor
	instanceVariableNames: 'bindings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Expressions-Model'
]]]

[[[
EEvaluatorVisitor >> initialize

	super initialize.
	bindings := Dictionary new
]]]

[[[
EEvaluatorVisitor >> visitVariable: aVariable

	^ bindings at: aVariable id
]]]

[[[
EEvaluatorVisitorTest >> testVisitVariableReturnsVariableValue

	| expression result |
	expression := (EVariable id: #answerToTheQuestion) negated.
	result := expression accept: EEvaluatorVisitor new.
	self assert: result equals: 42
]]]

[[[
EVariable class >> id: anId

	^ self new
		id: anId;
		yourself
]]]

[[[
EEvaluatorVisitorTest >> testVisitVariableReturnsVariableValue
	| expression result visitor |
	expression := (EVariable id: #answerToTheQuestion) negated.
	visitor := EEvaluatorVisitor new.
	result := expression accept: visitor.
	self assert: result equals: 42
]]]


[[[
EEvaluatorVisitor >> at: anId put: aValue

	bindings at: anId put: aValue
]]]

[[[
EVariable >> id
	^ id
]]]

[[[
EEvaluatorVisitorTest >> testVisitVariableReturnsVariableValue
	| expression result visitor |
	expression := EVariable id: #answerToTheQuestion.

	visitor := EEvaluatorVisitor new.
	visitor at: #answerToTheQuestion put: 42.
	
	result := expression accept: visitor.
	self assert: result equals: 42
]]]





[[[
EExpression >> evaluateWith: anObject

	| visitor |
	visitor := EEvaluatorVisitor new.
	visitor bindings: anObject.
	^ self accept: visitor.
]]]


[[[
EEvaluatorVisitor >> bindings: aDictionary

	bindings := aDictionary
]]]


!!! Redefine evaluateWith:

[[[
EExpression >> evaluateWith: anObject

	| visitor |
	visitor := EEvaluatorVisitor new.
	visitor bindings: anObject.
	^ self accept: visitor.
]]]

We remove ==evaluateWith:== from class ==Variable==


!!! A new visitor

Using a visitor is particularly interesting when we have multiple behavior that we want to encapsulate.
Such behaviors are applied on a structure without mixing the state of the structure with the state of the behavior
or mixing multiple behaviors together.

Now we show how we can have another visitor, an expression printer.

[[[
Object subclass: #EPrinterVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Expressions-Model'
]]]

We define

[[[
EPrinterVisitor >> visitConstant: aConstant
	^ aConstant value asString
]]]


[[[
EPrinterVisitor >> visitMutiplication: aMultiplication

	| left right |
	left := aMultiplication left accept: self.
	right := aMultiplication right accept: self.
	^ '(', left , ' * ', right, ')'
]]]


[[[
EPrinterVisitor >> visitAddition: anAddition

	| left right |
	left := anAddition left accept: self.
	right := anAddition right accept: self.
	^ '(', left , ' + ', right, ')'
]]]

[[[
EPrinterVisitor >> visitDivision: aDivision

	| left right |
	left := aDivision left accept: self.
	right := aDivision right accept: self.
	^ '(', left , ' / ', right, ')'
]]]

[[[
EPrinterVisitor >> visitNegation: aNegation

	| subExpression |
	subExpression := aNegation expression accept: self.
	^ subExpression , ' negated'
]]]

[[[
EPrinterVisitor >> visitVariable: aVariable

	^ aVariable id asString
]]]

!!! Stepping back 

State of behavior is defined in visitor.
We could abstract

!!! Conclusion

say something :)